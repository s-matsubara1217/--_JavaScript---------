<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chapter5.日付や時間の取り扱い</title>
</head>
<body>


  <script>

    /*********************************************
      82.西暦を取得したい
    **********************************************/
    // 利用シーン: 西暦を取得したいとき
    //           年号に関するデータを扱うとき
    // 【構文①】
    // メソッド： getFullYear()
    // 意味： 西暦を取得する
    // 戻り値： 数値

    /***
    const date = new Date();
    const year = date.getFullYear();
    console.log(year);
    ***/


    /*********************************************
      83.日付を取得したい
    **********************************************/
    // 利用シーン: 日付を画面に表示するとき
    //           日付を元に処理を分岐したいとき
    // 【構文①】
    // メソッド： getMonth()
    // 意味： 月を取得する
    // 戻り値： 数値
    // 【構文②】
    // メソッド： getDate()
    // 意味： 日を取得する
    // 戻り値： 数値

    /***
    const date = new Date();
    const month = date.getMonth() + 1;
    const day = date.getDate();
    const label = `${month}月${day}日`;
    console.log(label);
    ***/


    /*********************************************
      84.時刻を取得したい
    **********************************************/
    // 利用シーン: 現在時刻を使いたいとき
    //           デジタル時計として表示するとき
    // 【構文①】
    // メソッド： getHours()
    // 意味： 時間を取得する
    // 戻り値： 数値
    // 【構文②】
    // メソッド： getMinutes()
    // 意味： 分数を取得する
    // 戻り値： 数値
    // 【構文③】
    // メソッド： getSeconds()
    // 意味： 秒数を取得する
    // 戻り値： 数値
    // 【構文④】
    // メソッド： getMilliseconds()
    // 意味： ミリ秒数を取得する
    // 戻り値： 数値

    /***
    const date = new Date();
    const hour = date.getHours();
    const minutes = date.getMinutes();
    const seconds = date.getSeconds();
    const label = `${hour}時${minutes}分${seconds}秒`;
    console.log(label);

    // 午前と午後を分けたいとき
    const date = new Date();
    const hour = date.getHours();
    let meridiem;
    let hour2;
    if(hour<12) {
      meridiem = '午前';
      hour2 = hour;
    } else {
      meridiem = '午後';
      hour2 = hour - 12;
    }
    const label = `${meridiem}${hour2}時`;
    console.log(label);
    ***/


    /*********************************************
      85.曜日を取得したい
    **********************************************/
    // 利用シーン: 曜日を表示したいとき
    //           日付情報から曜日を調べたいとき
    // 【構文①】
    // メソッド： getDay()
    // 意味：曜日を取得する
    // 戻り値： 数値

    /***
    const date = new Date();
    const day = date.getDay();
    const dayList = ['日','月','火','水','木','金','土'];
    const label = dayList[day];
    console.log(label);
    ***/


    /*********************************************
      86.日本式の表記の時刻を取得したい
    **********************************************/
    // 利用シーン: 簡易的に日付時刻情報を出力したいとき
    //           多言語の日付時刻表示を作りたいとき
    // 【構文①】
    // メソッド： toLocaleDateString()
    // 意味： 日付の文字列を取得する
    // 戻り値： 文字列
    // 【構文②】
    // メソッド： toLocaleTimeString()
    // 意味： 時刻の文字列を取得する
    // 戻り値： 文字列

    /***
    const date = new Date();
    const locale = date.toLocaleString();
    const localeDate = date.toLocaleDateString();
    const localeTime = date.toLocaleTimeString();

    console.log(locale);
    console.log(localeDate);
    console.log(localeTime);
    ***/


    /*********************************************
      87. 日付文字列からタイムスタンプ値を取得したい
    **********************************************/
    // 利用シーン: 日付や時刻の差分を計算するために、タイムスタンプ値を取得したいとき
    // 【構文①】
    // メソッド： Date.parse()
    // 意味： 日付文字列からタイムスタンプ値を取得する
    // 戻り値： 数値

    /***
    const num1 = Date.parse('2023/10/08');
    console.log(num1);
    const num = Date.now();
    console.log(num);
    ***/


    /*********************************************
      88. Dateインスタンスに別の日時を設定したい
    **********************************************/
    // 利用シーン: 日付や時刻を設定したいとき

    /***
    const date1 = new Date('2018/06/12 20:01:10');
    const date2 = new Date('Tue Jun 12 2018 20:01:10');
    console.log(date1);
    console.log(date2);
    ***/


    /*********************************************
      89. 日付・時刻値を加算・減算したい
    **********************************************/
    // 利用シーン: 一日後の日付を知りたいとき
    //           月をまたぐ場合の日付を知りたいとき

    /***
    const date = new Date('2018/06/01');
    date.setMonth(date.getMonth() - 1);
    console.log(date.toLocaleDateString());
    date.setDate(date.getDate() + 60);
    console.log(date.toLocaleDateString());
    ***/


    /*********************************************
      90. 日付・時刻の差分を計算したい
    **********************************************/
    // 利用シーン: ふたつの日時の差を求めたい場合

    /***
    const dateA = new Date('2018/06/01');
    const dateB = new Date('2018/05/01');
    const diffMSec = dateA.getTime() - dateB.getTime();
    const diffDate = diffMSec / (24*60*60*1000);
    console.log(diffMSec);
    console.log(diffDate);
    ***/


    /*********************************************
      91. 経過時間を調べたい
    **********************************************/
    // 利用シーン: データ通信の時間を計測したいとき
    //           JavaScript処理時間を計測したいとき
    // 【構文①】
    // メソッド： Date.now()
    // 意味： 現在の時間を基準時からのm秒数で取得する
    // 戻り値： 数値

    /***
    const oldTime = Date.now();
    setInterval(() => {
      const currentTime = Date.now();
      const diff = currentTime - oldTime;
      const sec = Math.floor(diff/1000);
      console.log(sec);
    }, 1000);
    ***/


    /*********************************************
      92. カウントダウン処理をしたい
    **********************************************/
    // 利用シーン: 制限時間のカウントダウンを作りたいとき
    // 【構文①】
    // メソッド： setInterval(関数,m秒)
    // 意味： m秒後に引数の関数を実行する

    /***
    const totalTime = 10000;
    const oldTime = Date.now();
    const timerId = setInterval(() => {
      const currentTime = Date.now();
      const diff = currentTime - oldTime;
      const remainMSec = totalTime - diff;
      const remainSec = Math.ceil(remainMSec/1000);

      let label = `残り${remainSec}秒`;

      if(remainMSec <= 0) {
        clearInterval(timerId);
        label = '終了'
      }

      console.log(label);
    }, 1000);
    ***/


    /*********************************************
      93. アナログ時計を表示したい
    **********************************************/
    // 利用シーン: ゲームやアプリでアナログ時計を表示したいとき



  </script>
</body>
</html>
