<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chapter8.HTML要素の操作方法</title>

  <!-- <link rel="stylesheet" href="/sample/samples/c08/148/style.css"> -->

  <style>
  </style>
</head>
<body>

  <!-- 135.JavaScriptでの要素の取り扱い方を知りたい -->
  <!-- <h1>タイトルです</h1>
  <ul id="my-list">
    <li class="list">リスト1</li>
    <li class="list">リスト2</li>
    <li class="list">リスト3</li>
  </ul> -->

  <!-- 136.セレクター名に一致する要素をひとつ取得したい -->
  <!-- <div id="log"></div> -->

  <!-- 137.ID名に一致する要素を取得したい -->
  <!-- <div id="foo"></div> -->

  <!-- 138.セレクター名に該当する要素をまとめて取得したい -->
  <!-- <div class="box">ボックス1</div>
  <div class="box">ボックス2</div>
  <div class="box">ボックス3</div> -->

  <!-- 139.クラス名に一致する要素をすべて取得したい -->
  <!-- <div class="box"></div>
  <div class="box"></div>
  <div class="box"></div> -->

  <!-- 141.子要素・前後要素・親要素を取得したい -->
  <!-- <div id="parent">
    <div id="child1"></div>
    <div id="child2"></div>
    <div id="child3"></div>
  </div> -->

  <!-- 142.親要素の末尾に要素を追加したい -->
  <!-- <div id="myBox"></div>

  <div class="container">
    <div>子要素1</div>
    <div>子要素2</div>
  </div> -->

  <!-- 143.指定要素の直前に要素を追加したい -->
  <!-- <div id="myBox1">#myBox1要素</div>
  <div id="myBox2">#myBox2要素</div>

  <div class="container">
    <div>子要素1</div>
    <div id="box2">子要素2</div>
  </div> -->

  <!-- 144.要素の前後に別の要素を追加したい -->
  <!-- <div id="myBox1">#myBox1要素</div>
  <div id="myBox2">#myBox2要素</div>
  <div class="container">
    <div id="targetBox">#targetBox要素</div>
  </div> -->

  <!-- 145.HTMLコードを要素として挿入したい -->
  <!-- <div class="container">
    <div class="box">子要素1</div>
    <div class="box">子要素2</div>
  </div> -->

  <!-- 146.要素を動的に削除したい -->
  <!-- <div id="parent">
    <div id="child">取り除かれる要素</div>
  </div> -->

  <!-- 148.要素を生成したい -->

  <!-- 149.要素を複製したい -->
  <!-- <div class="container">
    <div id="myBox">ボックス</div>
  </div> -->

  <!-- 150.要素を他の要素で置き換えたい -->
  <!-- <div class="container">
    <div class="old-box box">旧ボックス</div>
  </div> -->

  <!-- 152.要素内のテキストを取得したり、書き換えたりしたい -->
  <h1>今日の天気</h1>
  <p id="weather-information">くもり<span class="temperature">（23℃）</span></p>
  <div id="weather">明日は晴れるでしょう</div>


  <script>

    /*********************************************
      135.JavaScriptでの要素の取り扱い方を知りたい
    **********************************************/
    // 利用シーン: JavaScriptでHTML要素を扱いたい時

    // ノードはJavaScriptでNodeオブジェクトとして扱える
    // 要素ノード：JavaScript上でElementオブジェクトとして扱う
    // 属性ノード
    // テキストノード


    /*********************************************
      136.セレクター名に一致する要素をひとつ取得したい
    **********************************************/
    // 利用シーン: セレクターから要素を取得したい時
    // 【構文①】
    // メソッド ： document.querySelector(セレクター名)
    // 意味 ： セレクター名に一致する要素を取得する
    // 戻り値 ： 要素（Element）

    /***
    const logElement = document.querySelector('#log');
    logElement.innerHTML = 'こんにちは';
    ***/


    /*********************************************
      137.ID名に一致する要素を取得したい
    **********************************************/
    // 利用シーン: ID値に一致する要素を取得したい時
    // 【構文①】
    // メソッド ： document.getElementById(ID名)
    // 意味 ： ID名に一致する要素を取得する
    // 戻り値 ： 要素（HTMLElement）

    /***
    const element = document.getElementById('foo');
    console.log(element);
    ***/


    /*********************************************
      138.セレクター名に該当する要素をまとめて取得したい
    **********************************************/
    // 利用シーン: セレクター名に該当する要素をまとめて取得し、処理したい時
    // 【構文①】
    // メソッド ： document.querySelectorAll(セレクター名)
    // 意味 ： セレクター名に一致する要素をすべて取得する
    // 戻り値 ： 要素の配列（NodeList）

    /***
    const nodeList = document.querySelectorAll('.box');
    nodeList.forEach((targetBox) => {
      console.log(targetBox);
    })

    nodeList.forEach((targetBox) => {
      targetBox.addEventListener('click', () => {
        alert('クリックされました')
      })
    })
    ***/


    /*********************************************
      139.クラス名に一致する要素をすべて取得したい
    **********************************************/
    // 利用シーン: クラス名に一致する要素をすべて取得したい時
    // 【構文①】
    // メソッド ： document.getElementsByClassName(クラス名)
    // 意味 ： クラス名に一致する要素をすべて取得する
    // 戻り値 ： 要素の配列（HTMLCollection）

    /***
    const boxList = document.getElementsByClassName('box');
    const boxLength = boxList.length;

    for (let index=0; index<boxLength; index++) {
      console.log(boxList[index]);
    }
    ***/


    /*********************************************
      140.<html>要素や<body>要素を取得したい
    **********************************************/
    // 利用シーン: <html>要素を取得したい時
    //           <body>要素にクラスを着脱したい時
    // 【構文①】
    // プロパティ ： document.documentElement
    // 意味 ： ルート要素
    // 型 ： html要素
    // 【構文②】
    // プロパティ ： document.head
    // 意味 ： head要素
    // 型 ： head要素
    // 【構文①】
    // プロパティ ： document.body
    // 意味 ： body要素
    // 型 ： body要素

    /***
    console.dir(document.body)

    const themeChangeButton = document.querySelector('.therme-change-button');
    themeChangeButton.addEventListener('click', ()=> {
      document.body.classList.toggle('theme-dark');
    })
    ***/


    /*********************************************
      141.子要素・前後要素・親要素を取得したい
    **********************************************/
    // 利用シーン: 特定要素の付近の要素を取得したい時
    // 【構文①】
    // プロパティ ： document.documentElement
    // 意味 ： ルート要素
    // 型 ： html要素

    /***
    const parentElement = document.querySelector('#parent');
    console.log(parentElement.children);

    const firstElementChild = parentElement.firstElementChild;
    console.log(firstElementChild);
    console.log(firstElementChild.previousElementSibling);
    console.log(firstElementChild.parentNode);
    ***/


    /*********************************************
      142.親要素の末尾に要素を追加したい
    **********************************************/
    // 利用シーン: 動的に表示要素を増やしたい時
    //           モーダルウィンドウを画面上に追加したい時
    // 【構文①】
    // メソッド ： 親ノード.appendChild(子ノード)
    // 意味 ： 親ノード内の末尾に子ノードを追加する
    // 戻り値 ： 要素（Element）

    /***
    const container = document.querySelector('.container');
    const myBox = document.querySelector('#myBox');

    setTimeout(() => {
      container.appendChild(myBox);
    }, 3000);
    ***/


    /*********************************************
      143.指定要素の直前に要素を追加したい
    **********************************************/
    // 利用シーン: 動的に表示要素を増やしたい時
    //           モーダルウィンドウを画面上に追加したい時
    // 【構文①】
    // メソッド ： 親ノード.insertBefore(子ノード,直前のノード)
    // 意味 ： 親ノード内にノードを追加する
    // 戻り値 ： 要素（Element）

    /***
    const container = document.querySelector('.container');
    const myBox1 = document.querySelector('#myBox1');
    const myBox2 = document.querySelector('#myBox2');
    const box2 = document.querySelector('#box2');

    setTimeout(() => {
      container.insertBefore(myBox1, container.firstElementChild);
    }, 3000);
    setTimeout(() => {
      container.insertBefore(myBox2, box2);
    }, 4000);
    ***/


    /*********************************************
      144.要素の前後に別の要素を追加したい
    **********************************************/
    // 利用シーン: HTML要素の挿入箇所を細かく指定したい
    // 【構文①】
    // メソッド ： ノード1.before(ノード2)
    // 意味 ： ノード1の前にノード2を追加する
    // 戻り値 ： なし
    // 【構文②】
    // メソッド ： ノード1.after(ノード2)
    // 意味 ： ノード1の後にノード2を追加する
    // 戻り値 ： なし
    // 【構文③】
    // メソッド ： 親ノード.hasChild(子ノード)
    // 意味 ： 親ノードに子ノードが存在するかを確認する
    // 戻り値 ： 真偽値

    /***
    const myBox1 = document.querySelector('#myBox1');
    const myBox2 = document.querySelector('#myBox2');
    const targetBox = document.querySelector('#targetBox');

    setTimeout(() => {
      targetBox.before(myBox1);
    }, 3000);

    setTimeout(() => {
      targetBox.after(myBox2);
    }, 4000);
    ***/


    /*********************************************
      145.HTMLコードを要素として挿入したい
    **********************************************/
    // 利用シーン: 動的に表示要素を増やしたい時
    //           モーダルウィンドウを画面上に表示したいとき
    // 【構文①】
    // メソッド ： 親要素.insertAdjacentHTML(挿入位置,文字列)
    // 意味 ： 文字列をHTMLとして挿入する
    // 戻り値 ： 要素(Element)

    // beforebegin : 親要素の直前
    // afterbegin : 親要素内の先頭
    // beforeend : 親要素内の末尾
    // afterend : 親要素の直後

    /***
    const container = document.querySelector('.container');
    const newBox = `<div class="new-box box">.new-box要素</div>`;
    setTimeout(() => {
      container.insertAdjacentHTML('afterbegin', newBox);
      container.insertAdjacentHTML('afterend', newBox);
    }, 3000);
    ***/


    /*********************************************
      146.要素を動的に削除したい
    **********************************************/
    // 利用シーン: 要素を動的に削除したい時
    // 【構文①】
    // メソッド ： ノード.removeChild(子ノード)
    // 意味 ： 親要素の子要素を取り除く
    // 戻り値 ： 取り除かれた要素(Element)

    /***
    setTimeout(() => {
      const parentElement = document.querySelector('#parent');
      const childElement = document.querySelector('#child');
      parentElement.removeChild(childElement);
    }, 3000);
    ***/


    /*********************************************
      147.自分自身の要素を削除したい
    **********************************************/
    // 利用シーン: 要素を動的に削除したい時
    // 【構文①】
    // メソッド ： ノード.remove()
    // 意味 ： 要素を取り除く
    // 戻り値 ： なし

    /***
    setTimeout(() => {
      const childElement = document.querySelector('#child');
      childElement.remove();
    }, 3000);
    ***/


    /*********************************************
      148.要素を生成したい
    **********************************************/
    // 利用シーン: HTML要素を動的に生成したい時
    //           モーダルウィンドウを生成したい時
    // 【構文①】
    // メソッド ： document.createElement('タグ名',オプション)
    // 意味 ： タグ名の要素を作成する
    // 戻り値 ： 要素

    /***
    const divElement = document.createElement('div');
    const anchorElement = document.createElement('a');

    divElement.innerHTML = 'これは動的に生成された要素です。';
    document.body.appendChild(divElement);
    ***/

    /***
    document.querySelector('#create-modal-button').addEventListener('click', displayModalWindow);

    function displayModalWindow() {
      const modalElement = document.createElement('div');
      modalElement.classList.add('modal');

      const innerElement = document.createElement('div');
      innerElement.classList.add('inner');
      innerElement.innerHTML = `
        <p>モーダルウィンドウの中身です</p>
        <div class="character"></div>
      `;

      modalElement.appendChild(innerElement);
      document.body.appendChild(modalElement);

      innerElement.addEventListener('click', ()=> {
        closeModalWindow(modalElement);
      })
    }

    function closeModalWindow(modalElement) {
      document.body.removeChild(modalElement)
    }
    ***/


    /*********************************************
      149.要素を複製したい
    **********************************************/
    // 利用シーン: ユーザーのクリックごとに要素を増やしたい時
    // 【構文①】
    // メソッド ： ノード.cloneNode([真偽値])
    // 意味 ： ノードを複製する
    // 戻り値 ： ノード(Node)

    /***
    setTimeout(() => {
      const clonedBox = document.querySelector('#myBox').cloneNode();
      document.querySelector('.container').appendChild(clonedBox);
    }, 3000);
    ***/


    /*********************************************
      150.要素を他の要素で置き換えたい
    **********************************************/
    // 利用シーン: 親要素をたどって要素を置き換えたい時
    // 【構文①】
    // メソッド ： 親ノード.replaceChild(新ノード,旧ノード)
    // 意味 ： 新ノードと子ノードを置き換える
    // 戻り値 ： 置き換えられたノード

    /***
    setTimeout(() => {

      const container = document.querySelector('.container');
      const oldBox = document.querySelector('.old-box');
      const newBox = document.createElement('div');
      newBox.textContent = '新ボックス';
      newBox.classList.add('new-box','box');
      container.replaceChild(newBox,oldBox);

    }, 3000);
    ***/


    /*********************************************
      151.新ノードと旧ノードを入れ替えたい
    **********************************************/
    // 利用シーン: 要素を別の要素に置き換えたい時
    // 【構文①】
    // メソッド ： 旧ノード.replaceWith(新ノード)
    // 意味 ： 旧ノードを新ノードで置き換える
    // 戻り値 ： なし

    /***
    setTimeout(() => {

      const oldBox = document.querySelector('.old-box');
      const newBox = document.createElement('div');
      newBox.textContent = '新ボックス';
      newBox.classList.add('new-box', 'box');
      oldBox.replaceWith(newBox);

    }, 3000);
    ***/


    /*********************************************
      152.要素内のテキストを取得したり、書き換えたりしたい
    **********************************************/
    // 利用シーン: HTMLのテキストを書き換えたい時
    // 【構文①】
    // プロパティ ： ノード.textContent
    // 意味 ： ノード内のテキスト
    // 型 ： 文字列

    /***
    const weatherInformation = document.querySelector('#weather-information');
    console.log(weatherInformation.textContent);

    const weatherElement = document.querySelector('#weather');

    setTimeout(() => {
      weatherElement.textContent = '気温は24度の予想です。';
    }, 3000);
    ***/


    /*********************************************
      153.要素内のHTMLを取得したり、書き換えたりしたい
    **********************************************/
    // 利用シーン: HTMLのテキストや画像をタグごと書き換えたい時
    // 【構文①】
    // プロパティ ： 要素.innerHTML
    // 意味 ： 要素内のHTML文字列
    // 型 ： 文字列










  </script>
</body>
</html>
