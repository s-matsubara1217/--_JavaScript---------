<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chapter8.HTML要素の操作方法</title>

  <style>
  </style>
</head>
<body>

  <!-- 135.JavaScriptでの要素の取り扱い方を知りたい -->
  <!-- <h1>タイトルです</h1>
  <ul id="my-list">
    <li class="list">リスト1</li>
    <li class="list">リスト2</li>
    <li class="list">リスト3</li>
  </ul> -->

  <!-- 136.セレクター名に一致する要素をひとつ取得したい -->
  <!-- <div id="log"></div> -->

  <!-- 137.ID名に一致する要素を取得したい -->
  <!-- <div id="foo"></div> -->

  <!-- 138.セレクター名に該当する要素をまとめて取得したい -->
  <!-- <div class="box">ボックス1</div>
  <div class="box">ボックス2</div>
  <div class="box">ボックス3</div> -->

  <!-- 139.クラス名に一致する要素をすべて取得したい -->
  <!-- <div class="box"></div>
  <div class="box"></div>
  <div class="box"></div> -->

  <!-- 141.子要素・前後要素・親要素を取得したい -->
  <div id="parent">
    <div id="child1"></div>
    <div id="child2"></div>
    <div id="child3"></div>
  </div>

  <script>

    /*********************************************
      135.JavaScriptでの要素の取り扱い方を知りたい
    **********************************************/
    // 利用シーン: JavaScriptでHTML要素を扱いたい時

    // ノードはJavaScriptでNodeオブジェクトとして扱える
    // 要素ノード：JavaScript上でElementオブジェクトとして扱う
    // 属性ノード
    // テキストノード


    /*********************************************
      136.セレクター名に一致する要素をひとつ取得したい
    **********************************************/
    // 利用シーン: セレクターから要素を取得したい時
    // 【構文①】
    // メソッド ： document.querySelector(セレクター名)
    // 意味 ： セレクター名に一致する要素を取得する
    // 戻り値 ： 要素（Element）

    /***
    const logElement = document.querySelector('#log');
    logElement.innerHTML = 'こんにちは';
    ***/


    /*********************************************
      137.ID名に一致する要素を取得したい
    **********************************************/
    // 利用シーン: ID値に一致する要素を取得したい時
    // 【構文①】
    // メソッド ： document.getElementById(ID名)
    // 意味 ： ID名に一致する要素を取得する
    // 戻り値 ： 要素（HTMLElement）

    /***
    const element = document.getElementById('foo');
    console.log(element);
    ***/


    /*********************************************
      138.セレクター名に該当する要素をまとめて取得したい
    **********************************************/
    // 利用シーン: セレクター名に該当する要素をまとめて取得し、処理したい時
    // 【構文①】
    // メソッド ： document.querySelectorAll(セレクター名)
    // 意味 ： セレクター名に一致する要素をすべて取得する
    // 戻り値 ： 要素の配列（NodeList）

    /***
    const nodeList = document.querySelectorAll('.box');
    nodeList.forEach((targetBox) => {
      console.log(targetBox);
    })

    nodeList.forEach((targetBox) => {
      targetBox.addEventListener('click', () => {
        alert('クリックされました')
      })
    })
    ***/


    /*********************************************
      139.クラス名に一致する要素をすべて取得したい
    **********************************************/
    // 利用シーン: クラス名に一致する要素をすべて取得したい時
    // 【構文①】
    // メソッド ： document.getElementsByClassName(クラス名)
    // 意味 ： クラス名に一致する要素をすべて取得する
    // 戻り値 ： 要素の配列（HTMLCollection）

    /***
    const boxList = document.getElementsByClassName('box');
    const boxLength = boxList.length;

    for (let index=0; index<boxLength; index++) {
      console.log(boxList[index]);
    }
    ***/


    /*********************************************
      140.<html>要素や<body>要素を取得したい
    **********************************************/
    // 利用シーン: <html>要素を取得したい時
    //           <body>要素にクラスを着脱したい時
    // 【構文①】
    // プロパティ ： document.documentElement
    // 意味 ： ルート要素
    // 型 ： html要素
    // 【構文②】
    // プロパティ ： document.head
    // 意味 ： head要素
    // 型 ： head要素
    // 【構文①】
    // プロパティ ： document.body
    // 意味 ： body要素
    // 型 ： body要素

    /***
    console.dir(document.body)

    const themeChangeButton = document.querySelector('.therme-change-button');
    themeChangeButton.addEventListener('click', ()=> {
      document.body.classList.toggle('theme-dark');
    })
    ***/


    /*********************************************
      141.子要素・前後要素・親要素を取得したい
    **********************************************/
    // 利用シーン: 特定要素の付近の要素を取得したい時
    // 【構文①】
    // プロパティ ： document.documentElement
    // 意味 ： ルート要素
    // 型 ： html要素

    const parentElement = document.querySelector('#parent');
    console.log(parentElement.children);

    const firstElementChild = parentElement.firstElementChild;
    console.log(firstElementChild);
    console.log(firstElementChild.previousElementSibling);
    console.log(firstElementChild.parentNode);








  </script>
</body>
</html>
