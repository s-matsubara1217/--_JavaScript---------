<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chapter7.ユーザーアクションの取り扱い</title>
</head>
<body>

  <button class="button">ボタン</button>

  <script>

    /*********************************************
      113.ユーザー操作に合わせて発生する「イベント」について知りたい
    **********************************************/
    // 利用シーン: ユーザー操作時に処理を実行したい時

    /***
    const button = document.querySelector('.button');
    button.addEventListener('click', onClickButton);
    function onClickButton() {
      console.log('クリックされました');
    }
    ***/
   // イベントターゲット
   // イベントリスナー


    /*********************************************
      114.ユーザーの操作が起こった時に処理を行いたい
    **********************************************/
    // 利用シーン: イベント発生時の関数を指定したい時
    // 【構文①】
    // メソッド ： イベントターゲット.addEventListener(イベント名,リスナー,[オプション])
    // 意味 ： イベントリスナーの設定
    // 戻り値 ： なし

    /***
    const button = document.querySelector('.button');

    // アロー関数
    button.addEventListener('click', () => {
      console.log('クリック');
    })
   // function宣言
   button.addEventListener('click', function() {
    console.log('クリック');
   })
   // 関数名
   button.addEventListener('click', onClickButton);
   function onClickButton() {
    console.log('クリック');
   }

    button.addEventListener('click', (event)=> {
      console.log(event.target);
    })
    ***/


    /*********************************************
      115.イベントリスナーを一度だけ呼び出したい
    **********************************************/
    // 利用シーン: イベントを一度だけ呼び出したい
    // 【構文①】
    // オプション ： capture
    // 意味 ： キャプチャーフェーズで取得するか
    // 型 ： 真偽値
    // 【構文②】
    // オプション ： once
    // 意味 ： リスナーの呼び出しを1回のみにするか
    // 型 ： 真偽値
    // 【構文③】
    // オプション ： passive
    // 意味 ： パッシブイベントかどうか
    // 型 ： 真偽値

    /***
    const button = document.querySelector('.button');
    const option = {
      once: true
    };
    button.addEventListener('click', onClickButton, option);
    function onClickButton() {
      console.log('クリック');
    }
    ***/


    /*********************************************
      116.設定したイベントリスナーを削除したい
    **********************************************/
    // 利用シーン: イベントを一度だけ呼び出したい
    // 【構文①】
    // メソッド ： イベントターゲット.removeEventListener(イベント名,リスナー,[オプション])
    // 意味 ： イベントリスナーの削除
    // 型 ： なし

    /***
    const button = document.querySelector('.button');
    button.addEventListener('click', onClickButton);

    setTimeout(() => {
      button.removeEventListener('click',onClickButton)
    }, 3000);

    function onClickButton() {
      alert('クリック');
    }
    ***/


    /*********************************************
      117.ページが表示された時に処理をしたい
    **********************************************/
    // 利用シーン: DOM要素へアクセスできるようになったタイミングで処理を行う時
    //           画像が全て読み込まれてから処理を行う時
    // 【構文①】
    // イベント名 ： DOMContentLoaded
    // 発生タイミング ： HTMLドキュメントの解析完了時
    // 【構文②】
    // イベント名 ： load
    // 発生タイミング ： 全リソースの読み込み完了時




  </script>
</body>
</html>
