<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chapter7.ユーザーアクションの取り扱い</title>
</head>
<body>

  <!-- 118.クリック時に処理をしたい -->
  <!-- <button class="button">ボタン</button> -->

  <!-- 119.マウスを押した時や動かした時に処理をしたい -->
  <!-- <main class="main">
    <div id="log2" style="width: 300px; height: 300px; background-color: yellow;"></div>
  </main> -->

  <!-- 120.マウスオーバー時に処理をしたい -->
  <!-- <div class="box" style="width: 300px; height: 300px; background-color: yellow;"></div> -->

  <!-- 121.マウスオーバー時に処理をしたい（バブリングあり） -->
  <!-- <div class="box">
    <div class="inner" style="width: 300px; height: 300px; background-color: yellow;"></div>
  </div> -->

  <!-- 122.マウス操作時の座標を取得したい -->
  <!-- <div class="box">
    <div class="inner" style="width: 300px; height: 300px; background-color: yellow;"></div>
  </div> -->

  <!-- 124.テキスト選択時に処理をしたい -->
  <!-- <p class="paragraph">こんにちは</p> -->

  <!-- 126.タッチ操作時のイベントの発生情報を取得したい -->
  <!-- <div class="box" style="width: 300px; height: 300px; background-color: yellow;"></div> -->

  <!-- 127.キーボード入力時に処理をしたい -->
  <!-- <textarea class="textarea"></textarea>
  <p>現在<span class="string_num">0</span>文字入力中です。</p> -->




  <script>

    /*********************************************
      113.ユーザー操作に合わせて発生する「イベント」について知りたい
    **********************************************/
    // 利用シーン: ユーザー操作時に処理を実行したい時

    /***
    const button = document.querySelector('.button');
    button.addEventListener('click', onClickButton);
    function onClickButton() {
      console.log('クリックされました');
    }
    ***/
   // イベントターゲット
   // イベントリスナー


    /*********************************************
      114.ユーザーの操作が起こった時に処理を行いたい
    **********************************************/
    // 利用シーン: イベント発生時の関数を指定したい時
    // 【構文①】
    // メソッド ： イベントターゲット.addEventListener(イベント名,リスナー,[オプション])
    // 意味 ： イベントリスナーの設定
    // 戻り値 ： なし

    /***
    const button = document.querySelector('.button');

    // アロー関数
    button.addEventListener('click', () => {
      console.log('クリック');
    })
   // function宣言
   button.addEventListener('click', function() {
    console.log('クリック');
   })
   // 関数名
   button.addEventListener('click', onClickButton);
   function onClickButton() {
    console.log('クリック');
   }

    button.addEventListener('click', (event)=> {
      console.log(event.target);
    })
    ***/


    /*********************************************
      115.イベントリスナーを一度だけ呼び出したい
    **********************************************/
    // 利用シーン: イベントを一度だけ呼び出したい
    // 【構文①】
    // オプション ： capture
    // 意味 ： キャプチャーフェーズで取得するか
    // 型 ： 真偽値
    // 【構文②】
    // オプション ： once
    // 意味 ： リスナーの呼び出しを1回のみにするか
    // 型 ： 真偽値
    // 【構文③】
    // オプション ： passive
    // 意味 ： パッシブイベントかどうか
    // 型 ： 真偽値

    /***
    const button = document.querySelector('.button');
    const option = {
      once: true
    };
    button.addEventListener('click', onClickButton, option);
    function onClickButton() {
      console.log('クリック');
    }
    ***/


    /*********************************************
      116.設定したイベントリスナーを削除したい
    **********************************************/
    // 利用シーン: イベントを一度だけ呼び出したい
    // 【構文①】
    // メソッド ： イベントターゲット.removeEventListener(イベント名,リスナー,[オプション])
    // 意味 ： イベントリスナーの削除
    // 型 ： なし

    /***
    const button = document.querySelector('.button');
    button.addEventListener('click', onClickButton);

    setTimeout(() => {
      button.removeEventListener('click',onClickButton)
    }, 3000);

    function onClickButton() {
      alert('クリック');
    }
    ***/


    /*********************************************
      117.ページが表示された時に処理をしたい
    **********************************************/
    // 利用シーン: DOM要素へアクセスできるようになったタイミングで処理を行う時
    //           画像が全て読み込まれてから処理を行う時
    // 【構文①】
    // イベント名 ： DOMContentLoaded
    // 発生タイミング ： HTMLドキュメントの解析完了時
    // 【構文②】
    // イベント名 ： load
    // 発生タイミング ： 全リソースの読み込み完了時


    /*********************************************
      118.クリック時に処理をしたい
    **********************************************/
    // 利用シーン: ボタンをクリックしたら処理を行う時
    // 【構文①】
    // イベント名 ： click
    // 発生タイミング ： 要素のクリック時

    /***
    document.querySelector('.button').addEventListener('click', () => {
      alert('アラート');
    });
    ***/


    /*********************************************
      119. マウスを押した時や動かした時に処理をしたい
    **********************************************/
    // 利用シーン: マウスのドラッグに合わせて画像をアニメーションさせたいとき
    //           フリック操作を実現したいとき
    // 【構文①】
    // イベント名 ： mousedown
    // 発生タイミング ： マウスボタンを押したとき
    // 【構文②】
    // イベント名 ： mouseup
    // 発生タイミング ： マウスボタンを離したとき
    // 【構文③】
    // イベント名 ： mousemove
    // 発生タイミング ： マウスを動かしたとき

    /***
    const logArea = document.querySelector('#log2');
    logArea.addEventListener('mousedown', ()=> {
      logArea.innerHTML = 'マウスボタンを押した';
    })
    logArea.addEventListener('mouseup', ()=> {
      logArea.innerHTML = 'マウスボタンを離した';
    })
    logArea.addEventListener('mousemove', ()=> {
      logArea.innerHTML = 'マウスを移動した';
    })
    ***/


    /*********************************************
      120. マウスオーバー時に処理をしたい
    **********************************************/
    // 利用シーン: マウスホバー時にインタラクションを実装したいとき
    // 【構文①】
    // イベント名 ： mouseenter
    // 発生タイミング ： ポインティングデバイスが要素上に乗ったとき
    // 【構文②】
    // イベント名 ： mouseleave
    // 発生タイミング ： ポインティングデバイスが要素上から離れたとき

    /***
    document.querySelector('.box').addEventListener('mouseenter', ()=> {
      console.log('上に乗った');
    })
    document.querySelector('.box').addEventListener('mouseleave', ()=> {
      console.log('離れた');
    })
    ***/


    /*********************************************
      121. マウスオーバー時に処理をしたい（バブリングあり）
    **********************************************/
    // 利用シーン: マウスホバー時にインタラクションを実装したいとき
    // 【構文①】
    // イベント名 ： mouseover
    // 発生タイミング ： ポインティングデバイスが要素上に乗ったとき（バブリングあり）
    // 【構文②】
    // イベント名 ： mouseout
    // 発生タイミング ： ポインティングデバイスが要素上から離れたとき（バブリングあり）

    /***
    document.querySelector('.box').addEventListener('mouseover', ()=> {
      console.log('box要素にマウスがのった');
    })
    document.querySelector('.inner').addEventListener('mouseover', ()=> {
      console.log('inner要素にマウスがのった');
    })
    ***/


    /*********************************************
      122. マウス操作時の座標を取得したい
    **********************************************/
    // 利用シーン: マウスのクリック位置を取得したい
    //           マウスの動きに合わせて要素を動かしたいとき

    /***
    const targetBox = document.querySelector('.box');
    targetBox.addEventListener('mousemove', (event)=> {
      console.log(event.clientX, event.clientY);
    })
    ***/


    /*********************************************
      123. スクロール時に処理をしたい
    **********************************************/
    // 利用シーン: スクロール量に応じて要素を遅延表示するとき
    // 【構文①】
    // イベント名 ： scroll
    // 発生タイミング ： 対象の要素がスクロールしたとき

    /***
    window.addEventListener('scroll', ()=> {
      console.log('スクロール', window.scrollX, window.scrollY);
    });
    ***/


    /*********************************************
      124. テキスト選択時に処理をしたい
    **********************************************/
    // 利用シーン: テキストの選択時に処理を行う時
    //           テキストの選択処理を無効化する時
    // 【構文①】
    // イベント名 ： selectstart
    // 発生タイミング ： テキストが選択された時

    /***
    document.querySelector('.paragraph').addEventListener('selectstart', () => {
      console.log(('テキストが選択された'));
    })
    ***/


    /*********************************************
      125. タッチ操作時に処理をしたい
    **********************************************/
    // 利用シーン: スマートフォンで画面をタップした時に処理を行う時
    // 【構文①】
    // イベント名 ： touchstart
    // 発生タイミング ： タッチを開始した時
    // 【構文②】
    // イベント名 ： touchmove
    // 発生タイミング ： タッチポイントを動かしたとき
    // 【構文①】
    // イベント名 ： touchend
    // 発生タイミング ： タッチを終了したとき


    /*********************************************
      126. タッチ操作時のイベントの発生情報を取得したい
    **********************************************/
    // 利用シーン: 自前のフリック処理を実装したいとき
    //           タッチ位置に要素を動かすとき
    // 【構文①】
    // プロパティ ： event.changedTouches
    // 内容 ： タッチ情報（Touchオブジェクト）の配列
    // 型 ： 配列

    /***
    const box = document.querySelector('.box');
    box.addEventListener('touchstart', (event) => {
      console.log(event.changedTouches);
    })
    ***/


    /*********************************************
      127. キーボード入力時に処理をしたい
    **********************************************/
    // 利用シーン: 文字の入力のたびに処理を行いたいとき
    // 【構文①】
    // イベント名 ： keydown
    // 発生タイミング ： キーが押されたとき
    // 【構文②】
    // イベント名 ： keyup
    // 発生タイミング ： キーが離されたとき
    // 【構文③】
    // イベント名 ： keypress
    // 発生タイミング ： 文字を生成するキーが押されたとき

    /***
    document.querySelector('textarea').addEventListener('keydown', () => {
      console.log('キーが押された');
    })
    document.querySelector('textarea').addEventListener('keypress', () => {
      console.log('文字が入力された');
    })
    document.querySelector('textarea').addEventListener('keyup', () => {
      console.log('キーが離された');
    })

    const textarea = document.querySelector('.textarea');
    const string_num = document.querySelector('.string_num');
    textarea.addEventListener('keyup', onKeyUp);
    function onKeyUp() {
      const inputText = textarea.value;
      string_num.innerText = inputText.length;
    }
    ***/


    /*********************************************
      128. 入力されたキーを調べたい
    **********************************************/
    // 利用シーン: 入力された文字に応じて処理を行いたいとき


    /*********************************************
      129. タブがバックグラウンドになった時に処理をしたい
    **********************************************/
    // 利用シーン: ブラウザーのタブがバックグラウンドになった時、負荷の重い処理を止めたい時
    //           スマートフォンブラウザでスリープから復帰した時に処理したい時
    // 【構文①】
    // イベント名 ： visibilitychange
    // 発生タイミング ： ブラウザーのタブの表示状態が変わった時

    document.






  </script>
</body>
</html>
