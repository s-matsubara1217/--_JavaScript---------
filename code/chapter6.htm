<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chapter6.ブラウザーの操作方法</title>
</head>
<body>

  <!-- 95.コンファームを表示したい -->
  <!-- <button class="button">ボタン</button>
  <div class="log"></div> -->

  <script>

    /*********************************************
      94.アラートを表示したい
    **********************************************/
    // 利用シーン: 警告を表示したいとき
    //           同期的なモーダルとしてユーザーにメッセージを伝えたいとき
    // 【構文①】
    // メソッド： alert(メッセージ)
    // 意味： 警告ダイアログを表示
    // 戻り値： なし


    /*********************************************
      95.コンファームを表示したい
    **********************************************/
    // 利用シーン: 「はい」「いいえ」をユーザーに選択させたいとき
    //           同期的にコンファームを表示させたいとき
    // 【構文①】
    // メソッド： confirm(メッセージ)
    // 意味： 確認ダイアログを表示
    // 戻り値： 真偽値

    /***
    const btn = document.querySelector('button');
    btn.addEventListener('click', (event) => {
      const isYes = confirm('天気は晴れていますか？');
      document.querySelector('.log').innerHTML = isYes;
    })
    ***/


    /*********************************************
      96.文字入力プロンプトを表示したい
    **********************************************/
    // 利用シーン: ユーザーの文字入力を必要とする場合
    //           同期的に処理させたいとき
    // 【構文①】
    // メソッド： prompt(メッセージの内容, テキスト入力欄に表示される初期値)
    // 意味： 文字入力プロンプトを表示
    // 戻り値： 文字列

    /***
    const text = prompt('どうですか？', 'デフォルト文言');
    console.log(text);
    ***/


    /*********************************************
      97.ウインドウサイズを調べたい
    **********************************************/
    // 利用シーン: ブラウザー内の画面いっぱいにコンテンツを表示させたいとき
    //           画面幅に応じて処理やレイアウトを変えたいとき
    // 【構文①】
    // プロパティ： window.innerWidth
    // 意味： ブラウザーのビューポートの横幅
    // 戻り値： 数値
    // 【構文②】
    // プロパティ： window.innerHeight
    // 意味： ブラウザーのビューポートの高さ
    // 戻り値： 数値

    /***
    const w = window.innerWidth;
    console.log(w);
    const h = window.innerHeight;
    console.log(h);

    window.addEventListener('resize', resizeHandler);
    function resizeHandler(event) {
      const w = innerWidth;
      const h = innerHeight;
      console.log(w);
      console.log(h);
    }
    ***/


    /*********************************************
      98.デバイスピクセル比を調べたい
    **********************************************/
    // 利用シーン: デバイスピクセル比に応じて制御を分けたいとき
    //           高解像度デバイスで大きな画像を読み込むとき
    // 【構文①】
    // プロパティ： window.devicePixelRatio
    // 意味： デバイスピクセル比の値
    // 戻り値： 数値

    /***
    const dpr = window.devicePixelRatio;
    console.log(dpr);
    ***/


    /*********************************************
      99.デバイスピクセル比をcanvas要素に適用したい
    **********************************************/
    // 利用シーン: canvas要素を高解像度ディスプレイで綺麗に表示させたいとき


    /*********************************************
      100.タッチできるかどうかを調べたい
    **********************************************/
    // 利用シーン: デスクトップブラウザとモバイルブラウザで処理を分岐させたいとき
    // 【構文①】
    // プロパティ： window.ontouchstart
    // 意味： タッチ開始時のイベント
    // 戻り値： 関数
    // 【構文②】
    // プロパティ： navigator.pointerEnabled
    // 意味： ポインターが使えるかどうか
    // 戻り値： 真偽値
    // 【構文③】
    // プロパティ： navigator.maxTouchPoints
    // 意味： ポインターの最大数
    // 戻り値： 数値

    /***
    const isSupported = !!(
      'ontouchstart' in window ||
      (navigator.pointerEnabled && navigator.maxTouchPoints > 0)
    );
    ***/


    /*********************************************
      101.ページを移動したい
    **********************************************/
    // 利用シーン: a要素のクリック操作以外の方法でページを遷移させたいとき
    // 【構文①】
    // プロパティ： location.href
    // 意味： ブラウザのURL
    // 戻り値： 文字列

    /***
    console.log(location.href);
    location.href = 'https://www.google.com/?hl=ja';
    ***/


    /*********************************************
      102.ページをリロードしたい
    **********************************************/
    // 利用シーン: 掲示板などのページで再読み込みさせたいとき
    // 【構文①】
    // プロパティ： location.reload()

    /***
    location.reload();
    ***/


    /*********************************************
      103.履歴の前後のページに移動したい
    **********************************************/
    // 利用シーン: ブラウザの「戻る」ボタンを押した時と同じ挙動をさせたい時
    // 【構文①】
    // プロパティ： history.back()
    // 意味： 履歴をひとつ戻る
    // 戻り値： なし
    // 【構文②】
    // プロパティ： history.forward()
    // 意味： 履歴をひとつ進む
    // 戻り値： なし
    // 【構文①】
    // プロパティ： history.go(数値)
    // 意味： 履歴を任意の数だけ進む
    // 戻り値： なし

    /***
    history.back();
    history.forward();
    history.go(-1);
    ***/


    /*********************************************
      104.ハッシュ（#）に応じて処理を分けたい
    **********************************************/
    // 利用シーン: ディープリンクを実装したい
    //           ハッシュの値に応じて処理を振り分けたい
    // 【構文①】
    // プロパティ： location.hash
    // 意味： アンカー
    // 戻り値： 文字列

    const hash = location.hash;
    console.log(hash);


  </script>
</body>
</html>
