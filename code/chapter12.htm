<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chapter12.SVGやcanvas要素を取り扱う</title>

  <link rel="stylesheet" href="/sample/samples/common/css/style.css">
  <link rel="stylesheet" href="/sample/samples/c11/202/style.css">

  <style>
  </style>
</head>
<body>

  <!-- 205.SVGで要素を動的に追加したい -->
  <!-- <svg
    viewBox = "0 0 200 200"
    width="200" height="200"
    id="mySvg"
  >
  </svg> -->

  <!-- 206.SVG要素のスタイルを変更したい -->
  <!-- <svg viewBox="0 0 200 200"
    width="200" height="200">
    <circle id="myCircle1"
      cx="100" cy="100"
      stroke-width="2"
      stroke="#FFFFFF"
    />
  </svg> -->

  <!-- 207.SVG要素をマウス操作したい -->
  <!-- <main class="centering">
    <div>
      <svg viewBox="0 0 200 200"
           width="200" height="200">
        <circle id="myCircle"
                cx="100" cy="100"
                r="95"
                fill="#BBDEFB"/>
      </svg>
    </div>
  </main> -->

  <!-- 208.SVG要素をアニメーションさせたい -->
  <!-- <main class="centering">
    <div>
      <svg viewBox="0 0 200 200"
           width="200" height="200">
        <circle id="myCircle"
                cx="100" cy="100"
                r="95"
                fill="#BBDEFB"/>
      </svg>
    </div>
  </main> -->

  <!-- 209.SVGで描いたグラフィックをダウンロードさせたい -->
  <main class="centering">
    <div>
      <svg viewBox="0 0 200 200"
           width="200" height="200"
           id="mySvg">
        <circle cx="100" cy="100" r="100" fill="#FFFF8D"/>
      </svg>
      <br />
      <button id="btnSave">保存する</button>
    </div>
  </main>


  <script>

    /*** 204.SVGを使いたい
    **********************************************/
    // 利用シーン: 拡大・縮小で荒れないグラフィックを使いたいとき
    //           さまざまなスマートフォンにレスポンシブ対応できるグラフィックを使いたいとき


    /*** 205.SVGで要素を動的に追加したい
    **********************************************/
    // 利用シーン: JavaScriptで外部のデータをもとにグラフィックを描きたいとき
    // 【構文①】
    // メソッド ： document.createElementNS('http://www.w3.org/2000/svg',SVG要素名)
    // 意味 ： SVG要素を生成する
    // 戻り値 ： SVG要素

    /***
    const myCircle = document.createElementNS('http://www.w3.org/2000/svg','circle');

    myCircle.setAttribute('cx','100');
    myCircle.setAttribute('cy','100');
    myCircle.setAttribute('r','100');
    myCircle.setAttribute('fill','#ffff8d');

    const mySvg = document.querySelector('#mySvg');
    mySvg.appendChild(myCircle);
    ***/


    /*** 206.SVG要素のスタイルを変更したい
    **********************************************/
    // 利用シーン: ユーザーのインタラクションによってグラフィックを変化させるとき
    // 【構文①】
    // メソッド ： 要素.setAttribute(属性名,値)
    // 意味 ： 要素の属性を設定する
    // 戻り値 ： なし

    /***
    const circle1 = document.querySelector('#myCircle1');
    circle1.setAttribute('r','100');
    circle1.setAttribute('fill','#ffff8d');
    circle1.setAttribute('fill-opacity','0.5');
    ***/


    /*** 207.SVG要素をマウス操作したい
    **********************************************/
    // 利用シーン: ユーザーのインタラクションによってグラフィックを変化させるとき

    /***
    const circle = document.querySelector('#myCircle');
    circle.addEventListener('click', (event) => {
      alert('クリックされました');
    })
    ***/


    /*** 208.SVG要素をアニメーションさせたい
    **********************************************/
    // 利用シーン: SVG要素を時間経過で変化させたいとき

    /***
    const myCircle = document.querySelector('#myCircle');

    let time = 0;

    animate();

    function animate() {
      time += 0.1;
      myCircle.style.fill = `hsl(0,100%,${time}%)`;
      if(time<50) {
        requestAnimationFrame(animate);
      }
    }
    ***/


    /*** 209.SVGで描いたグラフィックをダウンロードさせたい
    **********************************************/
    // 利用シーン: SVGで描いたグラフィックをローカルに保存させたいとき

    /***
    document.querySelector('#btnSave').addEventListener('click', saveFile);

    const content = document.querySelector('#mySvg').outerHTML;

    function saveFile() {
      const fileName = `mySvg.svg`;
      const content = document.querySelector('#mySvg').outerHTML;
      const dataUrl = 'data:image/svg+xml,\n' + encodeURIComponent(content);

      // BOMの文字化け対策
      const bom = new Uint8Array([0xef,0xbb,0xbf]);
      const blob = new Blob([bom,content], {type:'text/plain'});

      if(window.navigator.msSaveBlob) {
        // for IE
        window.navigator.msSaveBlob(blob,fileName);
      } else if(window.URL && window.URL.createObjectURL) {
        const a = document.createElement('a');
        a.download = fileName;
        a.href = window.URL.createObjectURL(blob);
        document.body.appendChild(a);
        a.click();
        document.body.removeChild(a);
      } else {
        // for Safari
        window.open(dataUrl,'_blank');
      }

    }
    ***/


    /*** 210.キャンバス要素を使いたい
    **********************************************/
    // 利用シーン: ビットマップベースの図形をスクリプトで扱いたいとき


    /*** 211.キャンバス要素に塗りと線を描きたい
    **********************************************/
    // 利用シーン: canvasに図形を書きたいとき


    /*** 212.キャンバスに画像を貼り付けたい
    **********************************************/
    // 利用シーン: canvasで外部から読み込んだ画像を表示させたいとき


    /*** 213.キャンバスの画素情報を使いたい
    **********************************************/
    // 利用シーン: 画素情報を調べたいとき
    //           画像加工するための画素情報を得たいとき


    /*** 214.画像のRGBA値を調べたい
    **********************************************/
    // 利用シーン: マウスの下にある画像の画素情報を調べたいとき
    //           画像に含まれる色を調べたいとき


    /*** 215.キャンバスの画像を加工したい
    **********************************************/
    // 利用シーン: 読み込んだ画像にエフェクトをかけたいとき


    /*** 216.キャンバスの画像をDataURLで取得したい
    **********************************************/
    // 利用シーン: キャンバスの描画結果を文字列として取得したいとき
    //           文字列とすることでサーバーに保存したいとき
    //           キャンバスの描画結果をimg要素に複製したいとき


    /*** 217.PNG/JPEGなどの異なる形式のDataURLを取得したい
    **********************************************/
    // 利用シーン: PNG形式のDataURLを取得したいとき
    //           JPEG形式のDataURLを取得したいとき


    /*** 218.キャンバスで描いたグラフィックをダウンロードしたい
    **********************************************/
    // 利用シーン: ブラウザ上で描いた図形をユーザーのマシンにダウンロードさせたいとき
    //           ブラウザ上で加工した画像をユーザーのマシンにダウンロードさせたいとき








  </script>
</body>
</html>
