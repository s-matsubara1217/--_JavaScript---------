<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chapter17.プログラムのデバッグ</title>

  <link rel="stylesheet" href="/sample/samples/common/css/style.css">
  <!-- <link rel="stylesheet" href="/sample/samples/c14/202/style.css"> -->

  <style>
  </style>
</head>
<body>




  <script>

    /*** 251.情報・エラー・警告を出力したい
    **********************************************/
    // 利用シーン: JavaScriptのコードの実行結果を知りたいとき
    //           レベルに応じてコンソールを使い分けたいとき

    // console.log('ログです');
    // console.info('情報です');
    // console.warn('警告です');
    // console.error('エラーです');


    /*** 252.オブジェクトの構造を出力したい
    **********************************************/
    // 利用シーン: 深い階層のデータの中身を知りたいとき
    // 【構文①】
    // メソッド ： console.dir(オブジェクト)
    // 意味 ： オブジェクトの構造を出力する
    // 戻り値 ： なし
    // 【構文②】
    // メソッド ： console.table(オブジェクト)
    // 意味 ： オブジェクトの構造
    // 戻り値 ： なし

    /***
    const myObject = {
      id: 2,
      name: 'スズキ',
    }
    // console.dir(myObject);
    // console.dir(document.body)
    console.table(myObject);
    console.table(document.body)
    ***/


    /*** 253.エラーの挙動について知りたい
    **********************************************/
    // 利用シーン: プログラム実行中にエラーが発生したときの挙動を知りたいとき


    /*** 254.Errorオブジェクトを生成したい
    **********************************************/
    // 利用シーン: エラーの内容を設定したいとき
    // 【構文①】
    // メソッド ： new Error(エラー内容)
    // 意味 ： Errorインスタンスを生成する
    // 戻り値 ： Errorオブジェクト
    // 【構文②】
    // プロパティ ： Errorインスタンス.message
    // 意味 ： エラー内容
    // 型 ： 文字列

    /***
    // Errorオブジェクトのインスタンス化
    const error = new Error('エラーが発生しました。');
    console.log(error.message);
    ***/


    /*** 255.エラーを投げたい
    **********************************************/
    // 利用シーン: API通信時に不正な値が発見されたらエラー扱いにしたいとき
    // 【構文①】
    // 構文 ： throw Errorインスタンス
    // 意味 ： エラーを投げる

    /***
    function myFunction(value) {
      if(typeof value !== 'number') {
        // エラーを生成する
        const error = new Error(`「${value}」はNumberではありません`);
        alert(error.message);
        throw error;
      }
      console.log(`「${value}」は数値です`);
    }

    // myFunction(5);
    myFunction('スズキ');
    ***/


    /*** 256.エラー発生時にエラーを検知したい
    **********************************************/
    // 利用シーン: エラーの種類を検知したいとき
    //           エラーが発生しても処理を止めたくないとき
    //           エラーが発生したら別の処理をしたいとき
    // 【構文①】
    // 構文 ： tyr {} catch(error) {}
    // 意味 ： エラーをキャッチして処理をする

    /***
    const a = 10;

    try {
      a = 20;
    } catch(error) {
      console.log(`エラーが発生しました: ${error.message}`);
    }

    console.log(`定数aの値は${a}です`);
    ***/


    /*** 257.エラー発生時にもコードを実行したい
    **********************************************/
    // 利用シーン: エラーが発生しても処理を止めたくないとき
    //           エラーが発生したら別の処理をしたいとき
    // 【構文①】
    // 構文 ： tyr {} catch(error) {} finally {}
    // 意味 ： エラーをキャッチして処理をする

    /***
    function generateError() {
      try {
        if(Math.random() > 0.5) {
          throw new Error();
        } else {
          console.log('エラーなし');
        }
      } catch (error) {
        console.log('エラー発生');
      } finally {
        console.log('エラーの処理が完了しました');
        console.log('------------');
      }
    }
    setInterval(generateError, 3000);
    ***/


    /*** 258.エラーの種類について知りたい
    **********************************************/
    // 利用シーン: エラー発生時にそのエラーの種類を知りたいとき




  </script>
</body>
</html>
