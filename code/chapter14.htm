<!DOCTYPE html>
<html lang="ja">
<head>
  <meta charset="UTF-8">
  <meta name="viewport" content="width=device-width, initial-scale=1.0">
  <title>Chapter14.さまざまなデータの送受信方法</title>

  <link rel="stylesheet" href="/sample/samples/common/css/style.css">
  <link rel="stylesheet" href="/sample/samples/c11/202/style.css">

  <style>
  </style>
</head>
<body>

  <!-- 236.fetch()メソッドでバイナリを読み込みたい -->
  <!-- <button>読み込む</button> -->

  243. プッシュ通知を実行させたい
  <button>ボタン</button>



  <script>

    /*** 228.JSONの概要を知りたい
    **********************************************/
    // 利用シーン: ネットワークからデータを送受信したいとき
    //           データを定義したいとき


    /*** 229.JSONをパースしたい
    **********************************************/
    // 利用シーン: JSONの文字列をJavaScriptのオブジェクトに展開したいとき
    //           ネットワークから読み込んだJSON文字列を扱いたいとき
    // 【構文①】
    // メソッド ： JSON.parse(文字列)
    // 意味 ： JSON形式の文字列を、JSONオブジェクトに変換
    // 戻り値 ：オブジェクト

    /***
    // JSON文字列
    const jsonString = `{"students": 40, "grade": 4, "name": "C組"}`;

    // 文字列をJavaScriptのオブジェクトに変換
    const data = JSON.parse(jsonString);

    console.log(data);
    console.log(data.students);
    ***/


    /*** 230.オブジェクトをJSONに変換したい
    **********************************************/
    // 利用シーン: JavaScriptのオブジェクトをJSONの文字列に変換したいとき
    // 【構文①】
    // メソッド ： JSON.stringify(obj)
    // 意味 ： JavaScriptオブジェクトをJSON文字列に変換
    // 戻り値 ： 文字列

    /***
    const data = {a: 1000, b: 'こんにちは、世界'};
    const str = JSON.stringify(data);
    console.log(data);
    ***/


    /*** 231.JSONの変換時にインデントを付けたい
    **********************************************/
    // 利用シーン: JavaScriptのオブジェクトをJSONの文字列に変換したいとき
    //           JSONにインデントをつけ、可読性を上げたいとき
    // 【構文①】
    // メソッド ： JSON.stringify(obj, null, '')
    // 意味 ： JavaScriptオブジェクトをインデント付きでJSON文字列に変換
    // 戻り値 ： 文字列

    /***
    const data = {a: 1000, b: 'こんにちは、世界'};
    const str = JSON.stringify(data, null, ' ');
    console.log(str);
    ***/


    /*** 232.JSONの変換ルールをカスタマイズしたい
    **********************************************/
    // 利用シーン: 部分的にデータをJSONに変換したくないとき
    // 【構文①】
    // メソッド ： JSON.stringify(obj, replacer)
    // 意味 ： JavaScriptオブジェクトを一部のデータを変換してJSON文字列に変換
    // 戻り値 ： 文字列

    /***
    const replacer = (key, value) => {
      if(typeof value === 'number') {
        return undefined;
      }
      return value;
    }

    const obj = {
      pref: 'tokyo',
      orange: 100,
      flag: true,
      apple: 100
    };

    const str = JSON.stringify(obj, replacer, ' ');
    console.log(str);
    ***/


    /*** 233.fetch()メソッドでテキストを読み込みたい
    **********************************************/
    // 利用シーン: データを取得したいとき
    // 【構文①】
    // メソッド ： fetch(URL)
    // 意味 ： URLからデータを取得
    // 戻り値 ： Promise

    /***
    // Promiseのみで記載した場合
    fetch('../sample/samples/c14/233/sample.txt')
      .then((data) => data.text())
      .then((text) => {
        console.log(text);
      })
    ***/

    /***
    // await・asyncを使った記述方法
    async function load() {
      const data = await fetch('../sample/samples/c14/233/sample.txt');
      const text = await data.text();
      console.log(text);
    }
    load();
    ***/


    /*** 234.fetch()メソッドでJSONを読み込みたい
    **********************************************/
    // 利用シーン: JSON形式のテキストファイルを読み込みたいとき

    /***
    // Promiseのみで記載した場合
    fetch('../sample/samples/c14/234/sample.json')
      .then((data) => data.json())
      .then((obj) => {
        console.log(obj);
      })
    ***/

    /***
    // await・asyncを使って記載した場合
    async function load() {
      const data = await fetch('../sample/samples/c14/234/sample.json');
      const obj = await data.json();
      console.log(obj);
    }
    load();
    ***/


    /*** 235.fetch()メソッドでXMLを読み込みたい
    **********************************************/
    // 利用シーン: XML形式のテキストファイルを読み込みたいとき


    /*** 236.fetch()メソッドでバイナリを読み込みたい
    **********************************************/
    // 利用シーン: バイナリファイルを読み込みたいとき
    //           テキストファイルではない形式を扱いたいとき

    /***
    // Promiseのみで記載した場合
    const btn = document.querySelector('button');
    btn.addEventListener('click', () => {
      fetch('../sample/samples/c14/236/sample.jpg')
        .then((res) => res.blob())
        .then((blob) => {
          const image = new Image();
          image.src = URL.createObjectURL(blob);
          document.body.appendChild(image);
        });
    });
    ***/


    /*** 237.fetch()メソッドでデータを送信したい
    **********************************************/
    // 利用シーン: ウェブサーバーのプログラムにデータを渡したいとき
    //           ウェブサーバーと連携したプログラムを作りたいとき


    /*** 238.XMLHttpRequestでテキストを読み込みたい
    **********************************************/
    // 利用シーン: 古いブラウザーでデータ通信をしたいとき


    /*** 239.XMLHttpRequestでデータの読み込み状況を取得したい
    **********************************************/
    // 利用シーン: 外部ファイルの読み込みの割合を調べたいとき
    //           プログレスバーを表示させたいとき


    /*** 240.XMLHttpRequestで読み込み中の通信をキャンセルしたい
    **********************************************/
    // 利用シーン: すでに開始したネットワーク通信をキャンセルしたいとき


    /*** 241. バックグランドでスクリプトを実行させたい
    **********************************************/
    // 利用シーン: 負荷の高い処理を実行したいとき
    // 【構文①】
    // メソッド ： new Worker(ファイルパス)
    // 意味 ： Web Workerのインスタンスを作成する
    // 戻り値 ： インスタンス


    /*** 242. バックグランドでサービスワーカーを実行させたい
    **********************************************/
    // 利用シーン: ブラウザーの裏側でネットワークの監視をしたいとき


    /*** 243. プッシュ通知を実行させたい
    **********************************************/
    // 利用シーン: ブラウザーからOSのプッシュ通知枠を使って通知させたいとき
    // 【構文①】
    // プロパティ ： Notification.permission
    // 意味 ： ブラウザーが通知を許可しているか
    // 戻り値 ： 文字列

    const btn = document.querySelector('button');
    btn.addEventListener('click', notify);

    function notify() {
      switch (Notification.permission) {
        case 'default':
          Notification.requestPermission();
          break;
        case 'granted':
          new Notification('こんにちは');
          break;
        case 'denied':
          alert('通知が拒否されています');
          break;
      }
    }




  </script>
</body>
</html>
